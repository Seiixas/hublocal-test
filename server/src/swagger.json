{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "HubAPI Docs",
    "contact": {
      "email": "mateuseixas@icloud.com"
    }
  },
  "host": "localhost:3333",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "Everything about your Pets"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users/auth": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Authenticate user",
        "description": "Authenticate user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users must have name, email and password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AuthResponse"
            }
          },
          "401": {
            "description": "Email or password incorrect"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a new user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users must have name, email and password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "409": {
            "description": "User already exists"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Show user",
        "description": "Show user's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's ID that are used to idenfity.",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "404": {
            "description": "This user does not exists"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Update a user's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Users must have name, email and password.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "409": {
            "description": "User already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete the user's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "This user does not exists"
          }
        }
      }
    },
    "/companies": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Create company",
        "description": "Create a new company",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Necessary to create a company",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "409": {
            "description": "This company already exists"
          }
        }
      },
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "List companies",
        "description": "List all companies",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListCompany"
            }
          }
        }
      }
    },
    "/companies/{id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Show coompany",
        "description": "Show coompany's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListCompany"
            }
          },
          "404": {
            "description": "This company does not exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Delete company",
        "description": "Delete a company",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Company's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "This company does not exists"
          }
        }
      },
      "put": {
        "tags": [
          "Companies"
        ],
        "summary": "Update company",
        "description": "Update a company's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Companies properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "409": {
            "description": "Company already exists"
          }
        }
      }
    },
    "/places": {
      "post": {
        "tags": [
          "Places"
        ],
        "summary": "Create place",
        "description": "Create a new place",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Necessary to create a place",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePlaces"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "This company does not exists"
          }
        }
      },
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "List places",
        "description": "List all places",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListPlaces"
            }
          }
        }
      }
    },
    "/places/{id}": {
      "get": {
        "tags": [
          "Places"
        ],
        "summary": "Show place",
        "description": "Show place's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Place's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListPlaces"
            }
          },
          "404": {
            "description": "This place does not exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Places"
        ],
        "summary": "Delete place",
        "description": "Delete a place",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Place's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "This place does not exists"
          }
        }
      },
      "put": {
        "tags": [
          "Places"
        ],
        "summary": "Update place",
        "description": "Update a place's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Place ID that are used to idenfity.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Place's properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlace"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "This place does not exists"
          }
        }
      }
    },
    "/responsibles": {
      "post": {
        "tags": [
          "Responsibles"
        ],
        "summary": "Create responsible",
        "description": "Create a new responsible",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Necessary to create a responsible",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResponsible"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "This company does not exists"
          }
        }
      },
      "get": {
        "tags": [
          "Responsibles"
        ],
        "summary": "List responsibles",
        "description": "List all responsibles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsibles"
            }
          }
        }
      }
    },
    "/responsibles/{id}": {
      "get": {
        "tags": [
          "Responsibles"
        ],
        "summary": "Show responsible",
        "description": "Show responsible's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Responsible's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsibles"
            }
          },
          "404": {
            "description": "This responsible does not exists"
          }
        }
      },
      "delete": {
        "tags": [
          "Responsibles"
        ],
        "summary": "Delete place",
        "description": "Delete a place",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Responsible's ID that are used to idenfity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "This responsible does not exists"
          }
        }
      },
      "put": {
        "tags": [
          "Responsibles"
        ],
        "summary": "Update responsible",
        "description": "Update a responsible's profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Responsible ID that are used to idenfity.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Responsible's properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateResponsible"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    }
  },
  "definitions": {
    "ListResponsibles": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "public_place": {
          "type": "string"
        },
        "complement": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "cep": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "CreateResponsible": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "public_place": {
          "type": "string"
        },
        "complement": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "cep": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "UpdatePlace": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "public_place": {
          "type": "string"
        },
        "complement": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "cep": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "CreatePlaces": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "public_place": {
          "type": "string"
        },
        "complement": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "cep": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "company_id": {
          "type": "string"
        }
      }
    },
    "ListPlaces": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "public_place": {
          "type": "string"
        },
        "complement": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "cep": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "ListCompany": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "CNPJ": {
          "type": "string"
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "CNPJ": {
          "type": "string"
        }
      }
    },
    "AuthResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "auth": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}